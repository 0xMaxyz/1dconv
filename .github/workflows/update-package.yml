name: Update and Publish Package

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */1 * * *"

permissions:
  contents: write

jobs:
  check-for-changes:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check.outputs.has_changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Store current hash
        id: check
        run: |
          REPO_URL="https://github.com/1delta-DAO/contracts-delegation"
          BRANCH="composer-compact"

          # Clone the repository to check latest commit
          git clone --branch $BRANCH --depth 1 $REPO_URL temp-repo

          # Store the latest commit hash
          LATEST_HASH=$(cd temp-repo && git rev-parse HEAD)

          # Load the previous hash if it exists
          if [ -f last-processed-hash.txt ]; then
            PREVIOUS_HASH=$(cat last-processed-hash.txt)
          else
            PREVIOUS_HASH=""
          fi

          # Compare hashes
          if [ "$LATEST_HASH" != "$PREVIOUS_HASH" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

          # Clean up
          rm -rf temp-repo

  update-package:
    needs: check-for-changes
    if: ${{ needs.check-for-changes.outputs.has_changes == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      lib_changed: ${{ steps.check_lib_changes.outputs.lib_changed }}
      new_version: ${{ steps.version.outputs.new_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Install Foundry dependencies
        run: forge install

      - name: Install dependencies
        run: bun install

      - name: Check if library already exists
        run: |
          mkdir -p .tmp_prev_lib
          if [ -d "calldatalib-package/dist" ]; then
            cp -r calldatalib-package/dist .tmp_prev_lib/
          fi

      - name: Generate library and prepare package
        run: bun run pack

      - name: Check for library changes
        id: check_lib_changes
        run: |
          LIB_CHANGED=false

          # If old version doesn't exist, consider it changed
          if [ ! -d ".tmp_prev_lib/dist" ]; then
            echo "No previous library version found, considering as changed"
            LIB_CHANGED=true
          else
            # Check if files differ
            if ! diff -r -q calldatalib-package/dist .tmp_prev_lib > /dev/null 2>&1; then
              echo "Library content has changed"
              LIB_CHANGED=true
            else
              echo "No changes in library content"
            fi
          fi

          echo "lib_changed=${LIB_CHANGED}" >> $GITHUB_OUTPUT

          # Clean up
          rm -rf .tmp_prev_lib

      - name: Setup Node.js for publishing
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          registry-url: "https://registry.npmjs.org"

      - name: Bump package version
        id: version
        if: steps.check_lib_changes.outputs.lib_changed == 'true'
        run: |
          cd calldatalib-package
          # Get current version
          CURRENT_VERSION=$(grep '"version"' package.json | sed 's/.*: "\(.*\)".*/\1/')

          # Extract parts
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)

          # Bump patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"

          # Update package.json
          sed -i "s/\"version\": \"$CURRENT_VERSION\"/\"version\": \"$NEW_VERSION\"/" package.json

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Get current version if not changed
        id: current_version
        if: steps.check_lib_changes.outputs.lib_changed != 'true'
        run: |
          cd calldatalib-package
          CURRENT_VERSION=$(grep '"version"' package.json | sed 's/.*: "\(.*\)".*/\1/')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Create hash file if it doesn't exist
        run: |
          REPO_URL="https://github.com/1delta-DAO/contracts-delegation"
          BRANCH="composer-compact"
          git clone --branch $BRANCH --depth 1 $REPO_URL temp-repo
          LATEST_HASH=$(cd temp-repo && git rev-parse HEAD)
          echo $LATEST_HASH > last-processed-hash.txt
          rm -rf temp-repo

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # Check if we have changes to commit
          if [ "$(git status --porcelain | wc -l)" -gt "0" ]; then
            git add .
            
            if [ "${{ steps.check_lib_changes.outputs.lib_changed }}" == "true" ]; then
              git commit -m "Update package to version ${{ steps.version.outputs.new_version }}"
            else
              git commit -m "Update dependencies without changing library (version remains ${{ steps.current_version.outputs.current_version }})"
            fi
            
            git push
          else
            echo "No changes to commit"
          fi
